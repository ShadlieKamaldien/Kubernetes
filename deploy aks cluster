Create variables for the configuration values you reuse throughout the exercises.

1.This variables creates variables for the Resource Group, Cluster Name & Location. 

export RESOURCE_GROUP=rg-contoso-video
export CLUSTER_NAME=aks-contoso-video
export LOCATION=southafricanorth

	2. Run the az group create command to create a resource group. Deploy all resources into this new resource group.

az group create --name=$RESOURCE_GROUP --location=$LOCATION

	3. Run the az aks create command to create an AKS cluster.

az aks create --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --node-count 2 --enable-addons http_application_routing --generate-ssh-keys --node-vm-size Standard_B2s --network-plugin azure --windows-admin-username localadmin

	4. The command creates a new AKS cluster named aks-contoso-video within the rg-contoso-video resource group. The cluster has two nodes defined by the --node-count parameter. We're using only two nodes in this exercise for cost considerations. The --node-vm-size parameter configures the cluster nodes as Standard_B2s-sized VMs. The HTTP application routing add-on is enabled via the --enable-addons flag. These nodes are going to be part of System mode.
The --windows-admin-username parameter is used to set up administrator credentials for Windows containers, and prompts the user to set a password at the command line. The password has to meet Windows Server password requirements.

	5. Run the az aks nodepool add command to add another node pool that uses the Windows operating system.
	
	az aks nodepool add --resource-group $RESOURCE_GROUP --cluster-name $CLUSTER_NAME --name uspool --node-count 2 --node-vm-size Standard_B2s --os-type Windows
	
	6. The command adds a new node pool (User mode) to an existing AKS cluster (created in the previous command). This new node pool can be used to host applications and workloads, instead of using the System node pool, which was created in the previous step using az aks create.
	The --os-type parameter is used to specify operating system of the node pool. If not specified, the command uses Linux as operating system for the nodes.
Link with kubectl
	1. Link your Kubernetes cluster with kubectl by running the following command in Cloud Shell.
	
	az aks get-credentials --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP
	
	This command adds an entry to your ~/.kube/config file, which holds all the information to access your clusters. Kubectl enables you to manage multiple clusters from a single command-line interface.
	
	2. Run the kubectl get nodes command to check that you can connect to your cluster, and confirm its configuration.
	
	kubectl get nodes
	
	
Next unit: Deploy an application on your Azure Kubernetes Service cluster
